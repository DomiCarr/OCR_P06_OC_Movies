===== index.html =====
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./style/ocmovies_desktop.css">
    <link rel="stylesheet" href="./style/ocmovies_tablet.css">
    <link rel="stylesheet" href="./style/ocmovies_mobil.css">
    <script src="scripts/config.js" defer></script>
    <script src="scripts/api/rest_api.js" defer></script>

    <script src="scripts/ui/modal.js" defer></script>
    <script src="scripts/ui/menu.js" defer></script>

    <script src="scripts/events.js" defer></script>
    <script src="scripts/main.js" defer></script>

    <title>Document</title>
</head>

<body>
    <header>
        <div class="header_pic">
            <img src="./assets/pictures/just_dream_it.png">
        </div>
        <div class="header_text">
            Vidéos à la demande
        </div>
    </header>

    <main id="mainContent">

    </main>

</body>

</html>


===== ./scripts/api/rest_api.js =====
// rest_api.js
//
// Exchange with API_REST functions
//

// --------------------------------------------------
// Extract genres from API page
//
// input: - data : JSON object from API response
// output: - list of genres [{id, name}] extracted from page
//
// --------------------------------------------------
//
function extractGenresFromPage(data) {
    const list = data.results;
    const genres = [];

    for (let i = 0; i < list.length; i++) {
        genres.push({
            id: list[i].id,
            name: list[i].name
        });
    }
    return genres;
}

// --------------------------------------------------
// Fetch all genres from API
//
// input: - uses global genresUrl
// output: - Promise resolving to array of all genres [{id, name}]
//
// --------------------------------------------------
//
async function getAllGenres() {
    // Initialize an empty array to store all genres from all pages
    let allGenres = [];

    // Start fetching from the first page
    let page = 1;

    // Flag to control the loop: true if there is a next page
    let hasNext = true;

    // Loop until there are no more genre pages
    while (hasNext) {
        try {
            // For the current genre page:
            // Send an HTTP GET request to REST_API and wait for the response
            // `fetch()` returns a Promise for the response
            // `await` pauses execution until the Promise resolves, giving the Response object
            const response = await fetch(`${genresUrl}?page=${page}`);

            // Throw an error to be caught by the catch block
            // if the HTTP response status is not OK
            if (!response.ok) {
                throw new Error("HTTP error: " + response.status);
            }

            // Parse the HTTP response as JSON:
            // `await` ensures the code waits until the JSON is fully read and converted
            // into a JavaScript object before assigning it to `data`
            const data = await response.json();

            // Extract genres from the current page
            const genres = extractGenresFromPage(data);

            // Append the current page's genres to the full list
            allGenres = allGenres.concat(genres);

            // Check if there is another page of results in the API
            // data.next is a field in the JSON returned by the API for this page
            // It contains the URL of the next page, or null if there are no more pages
            // We set hasNext to true/false accordingly to control the loop
            hasNext = data.next !== null;

            // Move to the next page number
            page++;
        } catch (error) {
            // Log any fetch or parsing errors and stop the loop
            console.error("Error fetching page", page, error);
            hasNext = false;
        }
    }

    // Log all collected genres for debugging
    console.log(allGenres);

    // Return the full array of genres
    return allGenres;
}
// --------------------------------------------------
// Extract first 6 movies for a given genre, fetching next pages if needed
//
// input: - genre : string
// output: - movies: array of up to 6 movies [{id, title, image_url}]
//
// --------------------------------------------------
//
async function extractMoviesByGenre(genre) {
    console.log("Fetching movies for genre:", genre);

    let movies = [];
    let pageUrl = `${titlesUrl}?genre=${encodeURIComponent(genre)}&page=1`;

    while (movies.length < 6 && pageUrl) {
        const response = await fetch(pageUrl);
        console.log("HTTP response status:", response.status);

        const data = await response.json();
        console.log("Movies returned by API this page:", data.results.length);

        // Add movies from this page
        for (let m of data.results) {
            movies.push({
                id: m.id,
                title: m.title,
                image_url: m.image_url
            });
            console.log(`Processed movie: ${m.title}`);
            if (movies.length >= 6) break;
        }

        // Prepare next page if needed
        pageUrl = movies.length < 6 ? data.next : null;
    }

    console.log("Movies array ready:", movies);
    return movies;
}



===== ./scripts/config.js =====
// config.js
//
// Configuration file for global constants and variables
// Contains API URLs and application-wide settings
//


// URL of the REST API for genres
const genresUrl = "http://localhost:8000/api/v1/genres/";

// URL of the REST API for movie titles
const titlesUrl = "http://localhost:8000/api/v1/titles/";

// Global variable to store the currently selected genre
let selectedGenre = "";





===== ./scripts/events.js =====
//events.js
//
// Manage event listeners for user interactions: button clicks, menu hovers, etc.

// --------------------------------------------------
// Initialize event listeners for UI interactions
//
// input: - genres: list of genres from API_REST
// output: - DOM updated with click/hover handlers
//
// --------------------------------------------------
//
function listenEvents(genres) {
    // movie detail button
    const btnDetails = document.querySelector("#btnDetails");
    btnDetails.addEventListener("click", () => Toggle_modale());

    // close modal button
    const btnCloseModal = document.querySelector("#btnCloseModal");
    btnCloseModal.addEventListener("click", () => Toggle_modale());

    // close modal icon
    const iconCloseModal = document.querySelector("#iconCloseModal");
    iconCloseModal.addEventListener("click", () => Toggle_modale());

    // "voir plus" buttons
    // Select all "Voir plus" buttons and iterate over them
    document.querySelectorAll(".bf_voir_plus_bouton").forEach((btn) => {

        // Add a click event listener to toggle the display of extra tiles
        btn.addEventListener("click", () => {

            // Find the parent container (.bf_mosaik) that holds the tiles
            const bloc = btn.closest(".bf_mosaik");

            // Toggle a class to show or hide all tiles in the container
            bloc.classList.toggle("show_all_tiles");

            // If the container has the class "show_all_tiles", set button text to "Voir moins"
            // Otherwise, set it to "Voir plus"
            if (bloc.classList.contains("show_all_tiles")) {
                btn.textContent = "Voir moins";
            } else {
                btn.textContent = "Voir plus";
            }
        });
    });

    // Initialize and manage the genre menu behavior (hover, click, display)
    manageMenu(genres);
}



===== ./scripts/main.js =====
// main.js
//

// --------------------------------------------------
// Initialize application
//
// input: - none (uses global config & API)
// output: - generate page and event listeners
//
// --------------------------------------------------
//
async function initApp() {
    try {
        const genres = await getAllGenres();
        generateMenu(genres);
        listenEvents(genres);

        // ===== TEST TEMPORAIRE =====
        const testGenre = "Mystery";
        const movies = await extractMoviesByGenre(testGenre);
        console.log("Test extractMoviesByGenre result:", movies);
        // ===========================


    } catch (error) {
        console.error("Initialization error:", error);
    }
}

initApp();



===== ./scripts/ui/menu.js =====
// menu.js
//
// Functions to handle the genre menu and its interactive behavior
//

// Genres menu is open or closed
let menuOuvert = false;

// --------------------------------------------------
// Generate genres menu
//
// input: - genres : list of genres from the API_REST
// output: - DOM updated by the function
//
// --------------------------------------------------
//
function generateMenu(genres) {
    // if no selected genre assign the first genre
    if (!selectedGenre && genres.length > 0) {
        selectedGenre = genres[0].name;
    }

    const ul = document.getElementById("genres");
    ul.innerHTML = "";

    for (let i = 0; i < genres.length; i++) {
        const li = document.createElement("li");
        li.textContent = genres[i].name;

        // cursor changes as a hand on hover to visually indicate the item is clickable
        li.style.cursor = "pointer";

        // Attach click for every li:
        // Click always selects the genre and closes the menu
        li.addEventListener("click", () => {
            updateSelectedGenre(li);
            menuOuvert = false;
            menuDisplay(false, genres);
        });

        // hide all except first
        if (i !== 0) li.style.display = "none";

        ul.appendChild(li);
    }
}

// --------------------------------------------------
// Update selected genre
//
// input: - clickedItem : <li> DOM element clicked by user
// output: - DOM first item updated
//         - selectedGenre global variable updated
//
// --------------------------------------------------
//
function updateSelectedGenre(clickedItem) {
    const ul = document.getElementById("genres");
    const firstItem = ul.querySelector("li");
    firstItem.textContent = clickedItem.textContent;
    selectedGenre = clickedItem.textContent;
}

// --------------------------------------------------
// Display or hide genre menu
//
// input: - show : boolean, true = show menu, false = hide
//        - genres : list of genres from the API_REST
// output: - DOM updated: menu items shown/hidden, emoji set
//
// --------------------------------------------------
//
function menuDisplay(show, genres) {
    const menuItems = document.querySelectorAll("#genres li");
    if (menuItems.length <= 1) return;

    for (let i = 1; i < menuItems.length; i++) {
        menuItems[i].style.display = show ? "block" : "none";
        menuItems[i].textContent = menuItems[i].textContent.replace(" ✅", "");
        if (show && menuItems[i].textContent === selectedGenre) {
            menuItems[i].textContent = selectedGenre + " ✅";
        }
    }

    const firstItem = menuItems[0];
    if (show) {
        firstItem.textContent = genres[0].name;
        if (selectedGenre === genres[0].name) {
            firstItem.textContent = selectedGenre + " ✅";
        }
    } else {
        firstItem.textContent = selectedGenre;
    }
}

// --------------------------------------------------
// Manage hover behavior on genre menu
//
// input: - genres : list of genres from the API_REST
// output: - event listeners attached
//         - DOM updated on hover enter/leave
//
// --------------------------------------------------
//
function manageMenu(genres) {
    const menu = document.querySelector(".bf_menu");
    if (!menu) return;

    menu.addEventListener("mouseenter", () => {
        menuOuvert = true;
        const ul = document.getElementById("genres");
        const firstItem = ul.querySelector("li");
        firstItem.textContent = genres[0].name;
        menuDisplay(true, genres);
    });

    menu.addEventListener("mouseleave", () => {
        menuOuvert = false;
        const ul = document.getElementById("genres");
        const firstItem = ul.querySelector("li");
        firstItem.textContent = selectedGenre;
        menuDisplay(false, genres);
    });
}



===== ./scripts/ui/modal.js =====
// modal.js
//

// --------------------------------------------------
// Toggle modal display
//
// input: - none
// output: - DOM updated, modal shown or hidden
//
// --------------------------------------------------
//
function Toggle_modale() {
    const mod = document.querySelector("#modale");
    mod.classList.toggle("hidden_modale");
}



===== ./scripts/ui/tiles.js =====
// --------------------------------------------------
// Generate tiles HTML for a given category and list of movies
//
// input: - categoryName: string (ex: "Mystery")
//        - movies: array [{id, title, image_url}]
//        - containerSelector: string CSS selector of the container where to inject tiles
// output: - DOM updated with tiles
//
// --------------------------------------------------
//
function generateTiles(categoryName, movies, containerSelector) {
    const container = document.querySelector(containerSelector);
    if (!container) {
        console.error("Container not found:", containerSelector);
        return;
    }

    // Create the bloc_film wrapper
    const blocFilm = document.createElement("div");
    blocFilm.className = "bloc_film";

    // Category title
    const bfTitre = document.createElement("div");
    bfTitre.className = "bf_titre";
    bfTitre.textContent = categoryName;
    blocFilm.appendChild(bfTitre);

    // Mosaic container
    const bfMosaik = document.createElement("div");
    bfMosaik.className = "bf_mosaik";

    const tuilesDiv = document.createElement("div");
    tuilesDiv.className = "tuiles";

    // Generate each tile
    for (let i = 0; i < movies.length; i++) {
        const movie = movies[i];

        // Assign tuile class based on index to match existing CSS (tuile_1, tuile_2, tuile_3)
        const tuileClass = "tuile_" + ((i % 3) + 1);

        const tuileDiv = document.createElement("div");
        tuileDiv.className = tuileClass;

        // Image container
        const picDiv = document.createElement("div");
        picDiv.className = "tuile_pic";
        const img = document.createElement("img");
        img.src = movie.image_url;
        img.alt = movie.title;
        picDiv.appendChild(img);

        // Text + button container
        const textDiv = document.createElement("div");
        textDiv.className = "tuile_bloctexte";

        const titleDiv = document.createElement("div");
        titleDiv.className = "tuile_bloctexte_texte";
        titleDiv.textContent = movie.title;

        const button = document.createElement("button");
        button.className = "tuile_bloctexte_button";
        button.textContent = "Détails";
        button.addEventListener("click", () => {
            console.log("Clicked movie id:", movie.id);
            // Ici tu pourras appeler la modale ou autre
        });

        textDiv.appendChild(titleDiv);
        textDiv.appendChild(button);

        // Assemble tile
        tuileDiv.appendChild(picDiv);
        tuileDiv.appendChild(textDiv);

        // Add to tuiles container
        tuilesDiv.appendChild(tuileDiv);
    }

    bfMosaik.appendChild(tuilesDiv);

    // Voir plus button
    const voirPlusBtn = document.createElement("button");
    voirPlusBtn.className = "bf_voir_plus_bouton";
    voirPlusBtn.textContent = "Voir plus";
    bfMosaik.appendChild(voirPlusBtn);

    // Append mosaic to blocFilm
    blocFilm.appendChild(bfMosaik);

    // Inject into page
    container.appendChild(blocFilm);
}



